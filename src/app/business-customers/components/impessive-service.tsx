"use client";
import { useRef, useState, useEffect } from "react";
import gsap from "gsap";
import Image from "next/image";

const items = [
    {
        id: 1,
        title: "H·ªá th·ªëng qu·∫£n l√Ω t√≠ch h·ª£p",
        content:
            "SkyHome s·ª≠ d·ª•ng h·ªá th·ªëng qu·∫£n l√Ω t√≠ch h·ª£p gi√∫p ƒë·ªìng b·ªô h√≥a m·ªçi quy tr√¨nh v·∫≠n h√†nh, t·ª´ ti·∫øp nh·∫≠n y√™u c·∫ßu kh√°ch h√†ng, ph√¢n c√¥ng c√¥ng vi·ªác cho nh√¢n vi√™n ƒë·∫øn ki·ªÉm so√°t ch·∫•t l∆∞·ª£ng d·ªãch v·ª•. Nh·ªù ƒë√≥, m·ªçi th√¥ng tin ƒë·ªÅu ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c, gi·∫£m thi·ªÉu sai s√≥t v√† n√¢ng cao hi·ªáu qu·∫£ qu·∫£n l√Ω. ",
        image: "/business-service/icons/quanly.webp",
    },
    {
        id: 2,
        title: "Ch·∫•t l∆∞·ª£ng ƒë√†o t·∫°o",
        content:
            "ƒê·ªôi ng≈© nh√¢n vi√™n SkyHome ƒë∆∞·ª£c ƒë√†o t·∫°o b√†i b·∫£n, th∆∞·ªùng xuy√™n c·∫≠p nh·∫≠t ki·∫øn th·ª©c v√† k·ªπ nƒÉng m·ªõi nh·∫•t trong lƒ©nh v·ª±c v·ªá sinh c√¥ng nghi·ªáp. Ch√∫ng t√¥i x√¢y d·ª±ng ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o chuy√™n s√¢u, k·∫øt h·ª£p gi·ªØa l√Ω thuy·∫øt v√† th·ª±c h√†nh, gi√∫p nh√¢n vi√™n x·ª≠ l√Ω linh ho·∫°t m·ªçi t√¨nh hu·ªëng th·ª±c t·∫ø.",
        image: "/business-service/icons/daotao.webp",
    },
    {
        id: 3,
        title: "C√¥ng ngh·ªá hi·ªán ƒë·∫°i",
        content:
            "SkyHome ·ª©ng d·ª•ng c√°c c√¥ng ngh·ªá ti√™n ti·∫øn trong qu·∫£n l√Ω v√† v·∫≠n h√†nh d·ªãch v·ª•, nh∆∞ ph·∫ßn m·ªÅm qu·∫£n l√Ω th√¥ng minh, h·ªá th·ªëng b√°o c√°o t·ª± ƒë·ªông v√† c√°c thi·∫øt b·ªã h·ªó tr·ª£ l√†m s·∫°ch hi·ªán ƒë·∫°i. ",
        image: "/business-service/icons/congnghe.webp",
    },
    {
        id: 4,
        title: "H√≥a ch·∫•t ti√™u chu·∫©n",
        content:
            "Ch√∫ng t√¥i s·ª≠ d·ª•ng h√≥a ch·∫•t ƒë·∫°t chu·∫©n an to√†n, th√¢n thi·ªán v·ªõi m√¥i tr∆∞·ªùng v√† ƒë∆∞·ª£c ki·ªÉm ƒë·ªãnh b·ªüi c√°c c∆° quan ch·ª©c nƒÉng. SkyHome cam k·∫øt kh√¥ng s·ª≠ d·ª•ng c√°c lo·∫°i h√≥a ch·∫•t ƒë·ªôc h·∫°i, g√¢y ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe ng∆∞·ªùi d√πng v√† m√¥i tr∆∞·ªùng xung quanh.",
        image: "/business-service/icons/hoachat.webp",
    },
    {
        id: 5,
        title: "Thi·∫øt b·ªã hi·ªán ƒë·∫°i",
        content:
            "SkyHome ƒë·∫ßu t∆∞ v√†o c√°c thi·∫øt b·ªã l√†m s·∫°ch hi·ªán ƒë·∫°i, gi√∫p n√¢ng cao hi·ªáu qu·∫£ l√†m vi·ªác v√† ti·∫øt ki·ªám th·ªùi gian cho kh√°ch h√†ng. C√°c thi·∫øt b·ªã nh∆∞ m√°y h√∫t b·ª•i c√¥ng nghi·ªáp, m√°y ch√† s√†n, m√°y phun r·ª≠a √°p l·ª±c cao... ƒë·ªÅu ƒë∆∞·ª£c nh·∫≠p kh·∫©u t·ª´ c√°c th∆∞∆°ng hi·ªáu uy t√≠n, ƒë·∫£m b·∫£o ƒë·ªô b·ªÅn v√† hi·ªáu su·∫•t v∆∞·ª£t tr·ªôi.",
        image: "/business-service/icons/thietbi.webp",
    },
];
export default function ImpressiveService() {
    const [active, setActive] = useState<number>(0);
    const [isMobile, setIsMobile] = useState(false);

    const cardRefs = useRef<HTMLDivElement[]>([]);
    const imageRefs = useRef<HTMLDivElement[]>([]);
    const textRefs = useRef<HTMLParagraphElement[]>([]);
    const timelines = useRef<gsap.core.Timeline[]>([]);

    // Detect mobile
    useEffect(() => {
        const checkMobile = () => {
            setIsMobile(window.innerWidth < 1024); // < lg breakpoint
        };
        checkMobile();
        window.addEventListener("resize", checkMobile);
        return () => window.removeEventListener("resize", checkMobile);
    }, []);

    // GSAP animation only if not mobile
    useEffect(() => {
        if (isMobile) return; // b·ªè animation tr√™n mobile

        cardRefs.current.forEach((card, i) => {
            if (!card) return;

            if (typeof timelines.current[i] !== "undefined") {
                timelines.current[i]?.kill();
            }

            const tl = gsap.timeline({ defaults: { ease: "power3.out" } });
            timelines.current[i] = tl;

            if (active === i) {
                tl.to(card, { flex: 3, duration: 0.8, ease: "power4.inOut" }, 0)
                    .set([imageRefs.current[i], textRefs.current[i]], {
                        pointerEvents: "auto",
                    })
                    .fromTo(
                        imageRefs.current[i],
                        { opacity: 0, x: -20 },
                        { opacity: 1, x: 0, duration: 0.5 },
                        "-=0.3"
                    )
                    .fromTo(
                        textRefs.current[i],
                        { opacity: 0, y: 20 },
                        { opacity: 1, y: 0, duration: 0.5 },
                        "-=0.2"
                    );
            } else {
                tl.to(card, { flex: 1, duration: 0.8, ease: "power4.inOut" }, 0)
                    .to(
                        imageRefs.current[i],
                        { opacity: 0, x: -20, duration: 0.3, pointerEvents: "none" },
                        0
                    )
                    .to(
                        textRefs.current[i],
                        { opacity: 0, y: 20, duration: 0.3, pointerEvents: "none" },
                        0
                    );
            }
        });
    }, [active, isMobile]);

    return (
        <section className="w-[90%] lg:w-[76%] min-h-screen mx-auto pt-16 flex flex-col items-center">
            {/* Heading */}
            <div className="h-auto lg:h-1/3 mx-auto flex items-center justify-center z-10 mb-6">
                <h1 className="text-3xl md:text-5xl font-bold text-center text-sky-900">
                    ∆Øu ƒëi·ªÉm d·ªãch v·ª• SkyHome
                </h1>
            </div>

            {/* Cards */}
            {isMobile ? (
                // üëâ Mobile: show all cards expanded
                <div className="flex flex-col gap-4 w-full">
                    {items.map((item) => (
                        <div
                            key={item.id}
                            className="bg-[#FDDB00] rounded-lg p-4 flex flex-col"
                        >
                            <h3 className="font-bold text-2xl text-sky-900 mb-2">
                                {item.title}
                            </h3>
                            <Image
                                src={item.image}
                                alt={item.title}
                                width={600}
                                height={200}
                                className="rounded-lg mb-2 w-2/3 mx-auto object-contain"
                            />
                            <p className="text-lg text-gray-800">{item.content}</p>
                        </div>
                    ))}
                </div>
            ) : (
                // üëâ Desktop: animated cards
                <div className="flex w-full mx-auto h-[600px] gap-2">
                    {items.map((item, i) => (
                        <div
                            key={item.id}
                            ref={(el) => {
                                if (el) cardRefs.current[i] = el;
                            }}
                            onClick={() => setActive(i)}
                            className={`relative flex flex-col bg-[#FDDB00] rounded-lg p-4 cursor-pointer h-full
                ${active === i ? "items-start text-left" : "justify-center items-center"}
              `}
                            style={{ flex: i === 0 ? 3 : 1 }}
                        >
                            <h3 className="font-bold text-3xl text-sky-900 z-10">
                                {item.title}
                            </h3>

                            <div className="absolute inset-0 top-20 left-0 right-0 px-4 overflow-visible">
                                <div
                                    ref={(el) => {
                                        if (el) imageRefs.current[i] = el;
                                    }}
                                    className="opacity-0 pointer-events-none"
                                >
                                    <Image
                                        src={item.image}
                                        alt={item.title}
                                        width={600}
                                        height={200}
                                        className="rounded-lg mb-2 w-1/2 mx-auto object-cover"
                                    />
                                </div>

                                <p
                                    ref={(el) => {
                                        if (el) textRefs.current[i] = el;
                                    }}
                                    className="text-xl text-gray-800 opacity-0 pointer-events-none"
                                >
                                    {item.content}
                                </p>
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </section>
    );
}
